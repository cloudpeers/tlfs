on:
  push:
    branches:
    - master
  pull_request:

name: tlfs

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v2

    - name: Install rust toolchain
      uses: hecrj/setup-rust-action@v1

    - name: cargo test
      run: cargo test --all-features --workspace

  rustfmt:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v2

    - name: Install rust toolchain
      uses: hecrj/setup-rust-action@v1
      with:
        components: rustfmt

    - name: cargo fmt
      run: cargo fmt --all -- --check

  clippy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v2

    - name: Install rust toolchain
      uses: hecrj/setup-rust-action@v1
      with:
        components: clippy

    - name: cargo clippy
      run: cargo clippy --workspace --examples --tests --all-features -- -D warnings

  api:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v2

    - name: Install rust toolchain
      uses: hecrj/setup-rust-action@v1

    - name: Install node
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Install flutter
      uses: subosito/flutter-action@v1

    - run: cargo install --git https://github.com/vmx/wasm-multi-value-reverse-polyfill --locked
    - run: npm i -g prettier
    - run: flutter pub global activate dartdoc

    - name: build lib
      working-directory: api
      env:
        FFIGEN: 1
      run: cargo build --release

    - name: install tlfsc
      working-directory: tlfsc
      run: cargo install --path .

    - name: dart test
      working-directory: api/dart
      env:
        LD_LIBRARY_PATH: ../../target/release
      run: flutter test

    - name: build wasm
      working-directory: api
      run: OPTIMIZE=1 ./build-wasm.sh

    - name: dart analyzer
      working-directory: api/dart
      run: flutter analyze --no-fatal-infos

    - name: dartdoc
      working-directory: api/dart
      run: dartdoc

    # TODO
    #- name: eslint
    #  working-directory: api/js
    #  run: eslint

    # TODO
    #- name: typedoc
    #  working-directory: api/js
    #  run: typedoc

    - name: npm publish
      working-directory: api/js
      run: npm publish --dry-run

  release-tlfsc:
    strategy:
      fail-fast: false
      matrix:
        platform:
        - target: x86_64-unknown-linux-gnu
          host: ubuntu-latest
          file: tlfsc
          tar: tar --zstd
        - target: x86_64-apple-darwin
          host: macos-latest
          file: tlfsc
          tar: gtar --zstd
        - target: x86_64-pc-windows-msvc
          host: windows-latest
          file: tlfsc.exe
          tar: "\"C:\\Program Files\\Git\\usr\\bin\\tar.exe\" -I zstd"
    runs-on: ${{ matrix.platform.host }}
    steps:
    - name: Checkout sources
      uses: actions/checkout@v2

    - name: Install rust toolchain
      uses: hecrj/setup-rust-action@v1

    - name: Build tlfsc
      working-directory: tlfsc
      run: cargo build --release

    - name: Create artefact
      working-directory: target/release
      shell: bash
      run: ${{ matrix.platform.tar }} -cf tlfsc.${{ matrix.platform.target }}.tar.zst ${{ matrix.platform.file }}

  release-libtlfs:
    strategy:
      fail-fast: false
      matrix:
        platform:
        - target: x86_64-unknown-linux-gnu
          host: ubuntu-latest
          file: libtlfs.so
          tar: tar --zstd
        - target: x86_64-apple-darwin
          host: macos-latest
          file: libtlfs.dylib
          tar: gtar --zstd
        - target: x86_64-pc-windows-msvc
          host: windows-latest
          file: tlfs.dll tlfs.dll.lib tlfs.pdb
          tar: "\"C:\\Program Files\\Git\\usr\\bin\\tar.exe\" -I zstd"
        - target: aarch64-linux-android
          host: ubuntu-latest
          file: libtlfs.so
          tar: tar --zstd
        - target: aarch64-apple-ios
          host: macos-latest
          file: libtlfs.a
          tar: gtar --zstd
    runs-on: ${{ matrix.platform.host }}
    steps:
    - name: Checkout sources
      uses: actions/checkout@v2

    - name: Install rust toolchain
      uses: hecrj/setup-rust-action@v1
      with:
        rust-version: nightly
        targets: ${{ matrix.platform.target }}

    - name: Install cargo apk
      if: contains(matrix.platform.target, 'android')
      run: cargo install cargo-apk --locked --git https://github.com/rust-windowing/android-ndk-rs/ --branch update-subcommand

    - name: Build tlfs
      working-directory: api
      if: contains(matrix.platform.target, 'android') == false
      run: cargo build --release --target ${{ matrix.platform.target }}

    - name: Build tlfs (android)
      working-directory: api
      if: contains(matrix.platform.target, 'android')
      run: sudo apt-get update && sudo apt-get install -y gcc-multilib && cargo apk build --release --target ${{ matrix.platform.target }}

    - name: Create artefact
      working-directory: target/${{ matrix.platform.target }}/release
      shell: bash
      run: mkdir libtlfs && cp ${{ matrix.platform.file }} libtlfs/

    - name: Create artefact
      working-directory: target/${{ matrix.platform.target }}/release
      shell: bash
      run: ${{ matrix.platform.tar }} -cf libtlfs.${{ matrix.platform.target }}.tar.zst libtlfs
